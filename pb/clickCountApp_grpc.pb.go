// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/clickCountApp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClickCountAppClient is the client API for ClickCountApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClickCountAppClient interface {
	GetClicks(ctx context.Context, in *GetClicksRequest, opts ...grpc.CallOption) (*GetClicksResponse, error)
	SetClicks(ctx context.Context, in *SetClicksRequest, opts ...grpc.CallOption) (*SetClicksResponse, error)
}

type clickCountAppClient struct {
	cc grpc.ClientConnInterface
}

func NewClickCountAppClient(cc grpc.ClientConnInterface) ClickCountAppClient {
	return &clickCountAppClient{cc}
}

func (c *clickCountAppClient) GetClicks(ctx context.Context, in *GetClicksRequest, opts ...grpc.CallOption) (*GetClicksResponse, error) {
	out := new(GetClicksResponse)
	err := c.cc.Invoke(ctx, "/clickCountApp.ClickCountApp/GetClicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clickCountAppClient) SetClicks(ctx context.Context, in *SetClicksRequest, opts ...grpc.CallOption) (*SetClicksResponse, error) {
	out := new(SetClicksResponse)
	err := c.cc.Invoke(ctx, "/clickCountApp.ClickCountApp/SetClicks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClickCountAppServer is the server API for ClickCountApp service.
// All implementations must embed UnimplementedClickCountAppServer
// for forward compatibility
type ClickCountAppServer interface {
	GetClicks(context.Context, *GetClicksRequest) (*GetClicksResponse, error)
	SetClicks(context.Context, *SetClicksRequest) (*SetClicksResponse, error)
	mustEmbedUnimplementedClickCountAppServer()
}

// UnimplementedClickCountAppServer must be embedded to have forward compatible implementations.
type UnimplementedClickCountAppServer struct {
}

func (UnimplementedClickCountAppServer) GetClicks(context.Context, *GetClicksRequest) (*GetClicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClicks not implemented")
}
func (UnimplementedClickCountAppServer) SetClicks(context.Context, *SetClicksRequest) (*SetClicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClicks not implemented")
}
func (UnimplementedClickCountAppServer) mustEmbedUnimplementedClickCountAppServer() {}

// UnsafeClickCountAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClickCountAppServer will
// result in compilation errors.
type UnsafeClickCountAppServer interface {
	mustEmbedUnimplementedClickCountAppServer()
}

func RegisterClickCountAppServer(s grpc.ServiceRegistrar, srv ClickCountAppServer) {
	s.RegisterService(&ClickCountApp_ServiceDesc, srv)
}

func _ClickCountApp_GetClicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickCountAppServer).GetClicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clickCountApp.ClickCountApp/GetClicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickCountAppServer).GetClicks(ctx, req.(*GetClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClickCountApp_SetClicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickCountAppServer).SetClicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clickCountApp.ClickCountApp/SetClicks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickCountAppServer).SetClicks(ctx, req.(*SetClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClickCountApp_ServiceDesc is the grpc.ServiceDesc for ClickCountApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClickCountApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clickCountApp.ClickCountApp",
	HandlerType: (*ClickCountAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClicks",
			Handler:    _ClickCountApp_GetClicks_Handler,
		},
		{
			MethodName: "SetClicks",
			Handler:    _ClickCountApp_SetClicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/clickCountApp.proto",
}
